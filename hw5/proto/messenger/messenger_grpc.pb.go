// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: messenger.proto

package messenger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Messenger_Enter_FullMethodName      = "/proto.Messenger/Enter"
	Messenger_Leave_FullMethodName      = "/proto.Messenger/Leave"
	Messenger_Send_FullMethodName       = "/proto.Messenger/Send"
	Messenger_SendSecret_FullMethodName = "/proto.Messenger/SendSecret"
	Messenger_Receive_FullMethodName    = "/proto.Messenger/Receive"
)

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerClient interface {
	Enter(ctx context.Context, in *User, opts ...grpc.CallOption) (Messenger_EnterClient, error)
	Leave(ctx context.Context, in *User, opts ...grpc.CallOption) (*Ack, error)
	Send(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendClient, error)
	SendSecret(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendSecretClient, error)
	Receive(ctx context.Context, in *User, opts ...grpc.CallOption) (Messenger_ReceiveClient, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) Enter(ctx context.Context, in *User, opts ...grpc.CallOption) (Messenger_EnterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[0], Messenger_Enter_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerEnterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messenger_EnterClient interface {
	Recv() (*Mail, error)
	grpc.ClientStream
}

type messengerEnterClient struct {
	grpc.ClientStream
}

func (x *messengerEnterClient) Recv() (*Mail, error) {
	m := new(Mail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Leave(ctx context.Context, in *User, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Messenger_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) Send(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[1], Messenger_Send_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerSendClient{stream}
	return x, nil
}

type Messenger_SendClient interface {
	Send(*Mail) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type messengerSendClient struct {
	grpc.ClientStream
}

func (x *messengerSendClient) Send(m *Mail) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerSendClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) SendSecret(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendSecretClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[2], Messenger_SendSecret_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerSendSecretClient{stream}
	return x, nil
}

type Messenger_SendSecretClient interface {
	Send(*SecretMail) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type messengerSendSecretClient struct {
	grpc.ClientStream
}

func (x *messengerSendSecretClient) Send(m *SecretMail) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerSendSecretClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) Receive(ctx context.Context, in *User, opts ...grpc.CallOption) (Messenger_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[3], Messenger_Receive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messenger_ReceiveClient interface {
	Recv() (*Mail, error)
	grpc.ClientStream
}

type messengerReceiveClient struct {
	grpc.ClientStream
}

func (x *messengerReceiveClient) Recv() (*Mail, error) {
	m := new(Mail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
// All implementations must embed UnimplementedMessengerServer
// for forward compatibility
type MessengerServer interface {
	Enter(*User, Messenger_EnterServer) error
	Leave(context.Context, *User) (*Ack, error)
	Send(Messenger_SendServer) error
	SendSecret(Messenger_SendSecretServer) error
	Receive(*User, Messenger_ReceiveServer) error
	MustEmbedUnimplementedMessengerServer()
}

// UnimplementedMessengerServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (UnimplementedMessengerServer) Enter(*User, Messenger_EnterServer) error {
	return status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedMessengerServer) Leave(context.Context, *User) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedMessengerServer) Send(Messenger_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessengerServer) SendSecret(Messenger_SendSecretServer) error {
	return status.Errorf(codes.Unimplemented, "method SendSecret not implemented")
}
func (UnimplementedMessengerServer) Receive(*User, Messenger_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedMessengerServer) MustEmbedUnimplementedMessengerServer() {}

// UnsafeMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServer will
// result in compilation errors.
type UnsafeMessengerServer interface {
	MustEmbedUnimplementedMessengerServer()
}

func RegisterMessengerServer(s grpc.ServiceRegistrar, srv MessengerServer) {
	s.RegisterService(&Messenger_ServiceDesc, srv)
}

func _Messenger_Enter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerServer).Enter(m, &messengerEnterServer{stream})
}

type Messenger_EnterServer interface {
	Send(*Mail) error
	grpc.ServerStream
}

type messengerEnterServer struct {
	grpc.ServerStream
}

func (x *messengerEnterServer) Send(m *Mail) error {
	return x.ServerStream.SendMsg(m)
}

func _Messenger_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).Leave(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).Send(&messengerSendServer{stream})
}

type Messenger_SendServer interface {
	SendAndClose(*Ack) error
	Recv() (*Mail, error)
	grpc.ServerStream
}

type messengerSendServer struct {
	grpc.ServerStream
}

func (x *messengerSendServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerSendServer) Recv() (*Mail, error) {
	m := new(Mail)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_SendSecret_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).SendSecret(&messengerSendSecretServer{stream})
}

type Messenger_SendSecretServer interface {
	SendAndClose(*Ack) error
	Recv() (*SecretMail, error)
	grpc.ServerStream
}

type messengerSendSecretServer struct {
	grpc.ServerStream
}

func (x *messengerSendSecretServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerSendSecretServer) Recv() (*SecretMail, error) {
	m := new(SecretMail)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerServer).Receive(m, &messengerReceiveServer{stream})
}

type Messenger_ReceiveServer interface {
	Send(*Mail) error
	grpc.ServerStream
}

type messengerReceiveServer struct {
	grpc.ServerStream
}

func (x *messengerReceiveServer) Send(m *Mail) error {
	return x.ServerStream.SendMsg(m)
}

// Messenger_ServiceDesc is the grpc.ServiceDesc for Messenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Leave",
			Handler:    _Messenger_Leave_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Enter",
			Handler:       _Messenger_Enter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Send",
			Handler:       _Messenger_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendSecret",
			Handler:       _Messenger_SendSecret_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _Messenger_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
