// Code generated by go-bindata.
// sources:
// templates/confirmReset.html
// templates/login.html
// templates/registration.html
// templates/reset.html
// static/login.css
// static/registration.css
// static/reset.css
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfirmresetHtml = []byte(`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" type="text/css" href="../static/reset.css" media="screen" />
  <title>Reset Password</title>
</head>
<body>
<div class="user">
  <header class="user__header">
    <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3219/logo.svg" alt="" />
    <h1 class="user__title">Reset Password</h1>
  </header>

  <form class="form">
    <div class="form__group">
      <input type="password" placeholder="Password" class="form__input" />
    </div>

    <div class="form__group">
      <input type="password" placeholder="Confirm Password" class="form__input" />
    </div>

    <button class="btn" type="button">Reset</button>
  </form>
  <script>
    const form   = document.forms[0]

    function GetURLParameter(sParam)
    {
      let sPageURL = window.location.search.substring(1);
      let sURLVariables = sPageURL.split('&');
      for (let i = 0; i < sURLVariables.length; i++)
      {
        let sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
          return sParameterName[1];
        }
      }
    }?

    form.addEventListener('submit', function(e) {
      e.preventDefault()
      const formData = new FormData(form);
      // Convert formData object to URL-encoded string:
      const payload = new URLSearchParams(formData);
      let token = GetURLParameter('jwt')
      fetch('http://localhost:8080/api/confirm-reset?jwt=' + token, {
        method: 'POST',
        body: payload,
      })
              .then(res => {
                if (res.status !== 200) {
                  console.log('Looks like there was a problem. Status Code: ' +
                          res.status);
                  form.classList.add('form--no')
                  return;
                }
                window.location.replace('http://localhost:8080/login')
              })
              .then(() => console.log("Submitted"))
    })
  </script>
</div>
</body>
</html>`)

func templatesConfirmresetHtmlBytes() ([]byte, error) {
	return _templatesConfirmresetHtml, nil
}

func templatesConfirmresetHtml() (*asset, error) {
	bytes, err := templatesConfirmresetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/confirmReset.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoginHtml = []byte(`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" type="text/css" href="../static/login.css" media="screen" />
  <title>Sign In</title>
</head>
<body>
<div class="user">
  <header class="user__header">
    <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3219/logo.svg" alt="" />
    <h1 class="user__title">Sign In</h1>
  </header>

  <form class="form">
    <div class="form__group">
      <input type="text" placeholder="Username" class="form__input" name="username" />
    </div>

    <div class="form__group">
      <input type="password" placeholder="Password" class="form__input" name="password" />
    </div>

    <button class="btn" type="submit">Sign In</button>
  </form>
  <script>
    const form   = document.forms[0]

    form.addEventListener('submit', function(e) {
      e.preventDefault()
      const formData = new FormData(form);
      // Convert formData object to URL-encoded string:
      const payload = new URLSearchParams(formData);
      fetch('http://localhost:8080/api/login', {
        method: 'POST',
        body: payload,
      })
              .then(res => {
                if (res.status !== 200) {
                  console.log('Looks like there was a problem. Status Code: ' +
                          res.status);
                  form.classList.add('form--no')
                  return;
                }
                let auth = res.headers["Authorization"].split(' ')[1]
                document.cookie = "jwt=" + auth
                window.location.replace('http://localhost:8080/protected')
              })
              .then(() => console.log("Submitted"))
    })
  </script>
</div>
</body>
</html>`)

func templatesLoginHtmlBytes() ([]byte, error) {
	return _templatesLoginHtml, nil
}

func templatesLoginHtml() (*asset, error) {
	bytes, err := templatesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRegistrationHtml = []byte(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="../static/registration.css" media="screen" />
    <title>Sign Up</title>
</head>
<body>
<div class="user" id="main">
    <header class="user__header">
        <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3219/logo.svg" alt="" />
        <h1 class="user__title">Sign Up</h1>
    </header>

    <form class="form">
        <div class="form__group">
            <input type="text" placeholder="Username" class="form__input" name="username" />
        </div>

        <div class="form__group">
            <input type="email" placeholder="Email" class="form__input" name="email" />
        </div>

        <div class="form__group">
            <input type="password" placeholder="Password" class="form__input" name="password" />
        </div>

        <button class="btn" type="submit" id="btn">Register</button>
    </form>
    <script>
        const form   = document.forms[0]

        form.addEventListener('submit', function(e) {
            e.preventDefault()
            const formData = new FormData(form);
            // Convert formData object to URL-encoded string:
            const payload = new URLSearchParams(formData);
            fetch('http://localhost:8080/api/register', {
                method: 'POST',
                body: payload,
            })
                .then(res => {
                    if (res.status !== 200) {
                        console.log('Looks like there was a problem. Status Code: ' +
                            res.status);
                        form.classList.add('form--no')
                        return;
                    }
                    elem = document.getElementById("main")
                    elem.appendChild(document.createTextNode("Check your email to confirm account"))
                    btn = document.getElementById("btn")
                    btn.parentNode.removeChild(btn)
                })
                .then(() => console.log("Submitted"))
        })
    </script>
</div>
</body>
</html>`)

func templatesRegistrationHtmlBytes() ([]byte, error) {
	return _templatesRegistrationHtml, nil
}

func templatesRegistrationHtml() (*asset, error) {
	bytes, err := templatesRegistrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/registration.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResetHtml = []byte(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="../static/reset.css" media="screen" />
    <title>Reset Password</title>
</head>
<body>
<div class="user">
    <header class="user__header">
        <img src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/3219/logo.svg" alt="" />
        <h1 class="user__title">Reset Password</h1>
    </header>

    <form class="form" id="main">

        <div class="form__group">
            <input type="email" placeholder="Email" class="form__input" />
        </div>

        <button class="btn" type="submit">Reset</button>
    </form>
    <script>
        const form   = document.forms[0]

        form.addEventListener('submit', function(e) {
            e.preventDefault()
            const formData = new FormData(form);
            // Convert formData object to URL-encoded string:
            const payload = new URLSearchParams(formData);
            fetch('http://localhost:8080/api/reset-password', {
                method: 'POST',
                body: payload,
            })
                .then(res => {
                    if (res.status !== 200) {
                        console.log('Looks like there was a problem. Status Code: ' +
                            res.status);
                        form.classList.add('form--no')
                        return;
                    }
                    elem = document.getElementById("main")
                    elem.appendChild(document.createTextNode("Check your email to reset"))
                    btn = document.getElementById("btn")
                    btn.parentNode.removeChild(btn)
                })
                .then(() => console.log("Submitted"))
        })
    </script>
</div>
</body>
</html>`)

func templatesResetHtmlBytes() ([]byte, error) {
	return _templatesResetHtml, nil
}

func templatesResetHtml() (*asset, error) {
	bytes, err := templatesResetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/reset.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticLoginCss = []byte(`$font-family:   "Roboto";
$font-size:     14px;

$color-primary: #ABA194;

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: $font-family;
    font-size: $font-size;
    background-size: 200% 100% !important;
    animation: move 10s ease infinite;
    transform: translate3d(0, 0, 0);
    background: linear-gradient(45deg, #49D49D 10%, #A2C7E5 90%);
    height: 100vh
}

.user {
    width: 90%;
    max-width: 340px;
    margin: 10vh auto;
}

.user__header {
    text-align: center;
    opacity: 0;
    transform: translate3d(0, 500px, 0);
    animation: arrive 500ms ease-in-out 0.7s forwards;
}

.user__title {
    font-size: $font-size;
    margin-bottom: -10px;
    font-weight: 500;
    color: white;
}

.form {
    margin-top: 40px;
    border-radius: 6px;
    overflow: hidden;
    opacity: 0;
    transform: translate3d(0, 500px, 0);
    animation: arrive 500ms ease-in-out 0.9s forwards;
}

.form--no {
    animation: NO 1s ease-in-out;
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.form__input {
    display: block;
    width: 100%;
    padding: 20px;
    font-family: $font-family;
    -webkit-appearance: none;
    border: 0;
    outline: 0;
    transition: 0.3s;

&:focus {
     background: darken(#fff, 3%);
 }
}

.btn {
    display: block;
    width: 100%;
    padding: 20px;
    font-family: $font-family;
    -webkit-appearance: none;
    outline: 0;
    border: 0;
    color: white;
    background: $color-primary;
    transition: 0.3s;

&:hover {
     background: darken($color-primary, 5%);
 }
}

@keyframes NO {
    from, to {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
    }

    10%, 30%, 50%, 70%, 90% {
        -webkit-transform: translate3d(-10px, 0, 0);
        transform: translate3d(-10px, 0, 0);
    }

    20%, 40%, 60%, 80% {
        -webkit-transform: translate3d(10px, 0, 0);
        transform: translate3d(10px, 0, 0);
    }
}

@keyframes arrive {
    0% {
        opacity: 0;
        transform: translate3d(0, 50px, 0);
    }

    100% {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}

@keyframes move {
    0% {
        background-position: 0 0
    }

    50% {
        background-position: 100% 0
    }

    100% {
        background-position: 0 0
    }
}`)

func staticLoginCssBytes() ([]byte, error) {
	return _staticLoginCss, nil
}

func staticLoginCss() (*asset, error) {
	bytes, err := staticLoginCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/login.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticRegistrationCss = []byte(`$font-family:   "Roboto";
$font-size:     14px;

$color-primary: #ABA194;

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: $font-family;
    font-size: $font-size;
    background-size: 200% 100% !important;
    animation: move 10s ease infinite;
    transform: translate3d(0, 0, 0);
    background: linear-gradient(45deg, #49D49D 10%, #A2C7E5 90%);
    height: 100vh
}

.user {
    width: 90%;
    max-width: 340px;
    margin: 10vh auto;
}

.user__header {
    text-align: center;
    opacity: 0;
    transform: translate3d(0, 500px, 0);
    animation: arrive 500ms ease-in-out 0.7s forwards;
}

.user__title {
    font-size: $font-size;
    margin-bottom: -10px;
    font-weight: 500;
    color: white;
}

.form {
    margin-top: 40px;
    border-radius: 6px;
    overflow: hidden;
    opacity: 0;
    transform: translate3d(0, 500px, 0);
    animation: arrive 500ms ease-in-out 0.9s forwards;
}

.form--no {
    animation: NO 1s ease-in-out;
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.form__input {
    display: block;
    width: 100%;
    padding: 20px;
    font-family: $font-family;
    -webkit-appearance: none;
    border: 0;
    outline: 0;
    transition: 0.3s;

&:focus {
     background: darken(#fff, 3%);
 }
}

.btn {
    display: block;
    width: 100%;
    padding: 20px;
    font-family: $font-family;
    -webkit-appearance: none;
    outline: 0;
    border: 0;
    color: white;
    background: $color-primary;
    transition: 0.3s;

&:hover {
     background: darken($color-primary, 5%);
 }
}

@keyframes NO {
    from, to {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
    }

    10%, 30%, 50%, 70%, 90% {
        -webkit-transform: translate3d(-10px, 0, 0);
        transform: translate3d(-10px, 0, 0);
    }

    20%, 40%, 60%, 80% {
        -webkit-transform: translate3d(10px, 0, 0);
        transform: translate3d(10px, 0, 0);
    }
}

@keyframes arrive {
    0% {
        opacity: 0;
        transform: translate3d(0, 50px, 0);
    }

    100% {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}

@keyframes move {
    0% {
        background-position: 0 0
    }

    50% {
        background-position: 100% 0
    }

    100% {
        background-position: 0 0
    }
}`)

func staticRegistrationCssBytes() ([]byte, error) {
	return _staticRegistrationCss, nil
}

func staticRegistrationCss() (*asset, error) {
	bytes, err := staticRegistrationCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/registration.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticResetCss = []byte(`$font-family:   "Roboto";
$font-size:     14px;

$color-primary: #ABA194;

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: $font-family;
    font-size: $font-size;
    background-size: 200% 100% !important;
    animation: move 10s ease infinite;
    transform: translate3d(0, 0, 0);
    background: linear-gradient(45deg, #49D49D 10%, #A2C7E5 90%);
    height: 100vh
}

.user {
    width: 90%;
    max-width: 340px;
    margin: 10vh auto;
}

.user__header {
    text-align: center;
    opacity: 0;
    transform: translate3d(0, 500px, 0);
    animation: arrive 500ms ease-in-out 0.7s forwards;
}

.user__title {
    font-size: $font-size;
    margin-bottom: -10px;
    font-weight: 500;
    color: white;
}

.form {
    margin-top: 40px;
    border-radius: 6px;
    overflow: hidden;
    opacity: 0;
    transform: translate3d(0, 500px, 0);
    animation: arrive 500ms ease-in-out 0.9s forwards;
}

.form--no {
    animation: NO 1s ease-in-out;
    opacity: 1;
    transform: translate3d(0, 0, 0);
}

.form__input {
    display: block;
    width: 100%;
    padding: 20px;
    font-family: $font-family;
    -webkit-appearance: none;
    border: 0;
    outline: 0;
    transition: 0.3s;

&:focus {
     background: darken(#fff, 3%);
 }
}

.btn {
    display: block;
    width: 100%;
    padding: 20px;
    font-family: $font-family;
    -webkit-appearance: none;
    outline: 0;
    border: 0;
    color: white;
    background: $color-primary;
    transition: 0.3s;

&:hover {
     background: darken($color-primary, 5%);
 }
}

@keyframes NO {
    from, to {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
    }

    10%, 30%, 50%, 70%, 90% {
        -webkit-transform: translate3d(-10px, 0, 0);
        transform: translate3d(-10px, 0, 0);
    }

    20%, 40%, 60%, 80% {
        -webkit-transform: translate3d(10px, 0, 0);
        transform: translate3d(10px, 0, 0);
    }
}

@keyframes arrive {
    0% {
        opacity: 0;
        transform: translate3d(0, 50px, 0);
    }

    100% {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}

@keyframes move {
    0% {
        background-position: 0 0
    }

    50% {
        background-position: 100% 0
    }

    100% {
        background-position: 0 0
    }
}`)

func staticResetCssBytes() ([]byte, error) {
	return _staticResetCss, nil
}

func staticResetCss() (*asset, error) {
	bytes, err := staticResetCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/reset.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/confirmReset.html": templatesConfirmresetHtml,
	"templates/login.html": templatesLoginHtml,
	"templates/registration.html": templatesRegistrationHtml,
	"templates/reset.html": templatesResetHtml,
	"static/login.css": staticLoginCss,
	"static/registration.css": staticRegistrationCss,
	"static/reset.css": staticResetCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"login.css": &bintree{staticLoginCss, map[string]*bintree{}},
		"registration.css": &bintree{staticRegistrationCss, map[string]*bintree{}},
		"reset.css": &bintree{staticResetCss, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"confirmReset.html": &bintree{templatesConfirmresetHtml, map[string]*bintree{}},
		"login.html": &bintree{templatesLoginHtml, map[string]*bintree{}},
		"registration.html": &bintree{templatesRegistrationHtml, map[string]*bintree{}},
		"reset.html": &bintree{templatesResetHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

